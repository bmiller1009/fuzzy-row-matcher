/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package org.bradfordmiller.fuzzyrowmatcher

import org.bradfordmiller.fuzzyrowmatcher.algos.Strings
import org.bradfordmiller.fuzzyrowmatcher.config.Config
import org.bradfordmiller.simplejndiutils.JNDIUtils
import org.bradfordmiller.sqlutils.SqlUtils
import org.slf4j.LoggerFactory
import java.sql.ResultSet

class FuzzyRowMatcher(private val config: Config) {

    companion object {
        val logger = LoggerFactory.getLogger(FuzzyRowMatcher::class.java)
    }

    fun fuzzyMatch(): Boolean {

        val ds = JNDIUtils.getDataSource(config.sourceJndi.jndiName, config.sourceJndi.context).left
        val hashColumns = config.sourceJndi.hashKeys
        val sql = config.sourceJndi.sql
        val algoSet = config.algoSet
        val stringLenPct = config.strLenDeltaPct

        var comparisonCount = 0
        var matches = 0

        logger.info("Beginning fuzzy matching process...")

        JNDIUtils.getConnection(ds).use {conn ->
            conn.prepareStatement(sql, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY)!!.use { stmt ->
                stmt.executeQuery().use { rs ->
                    var rowIndex = 1
                    while(rs.next()) {
                        var currentRowData = SqlUtils.stringifyRow(rs, hashColumns)
                        while (rs.next()) {
                            var rowData = SqlUtils.stringifyRow(rs, hashColumns)
                            //First check if the row qualifies based on the number of characters in each string
                            if (!Strings.checkStrLen(rowData, currentRowData, stringLenPct)) {
                                //logger.info("String $rowData with length ${rowData.length} will not be checked against ${currentRowData} with length ${currentRowData.length}")
                                continue
                            }
                            algoSet.forEach { algo ->
                                val score = algo.applyAlgo(rowData, currentRowData)
                                comparisonCount += 1
                                if (algo.qualifyThreshold(score)) {
                                    //Here we'll persist to the database
                                    logger.info("$currentRowData was compared with $rowData and the score was $score for ${algo.name}")
                                    matches += 1
                                }
                            }
                        }
                        rowIndex += 1
                        //logger.info("Cursor moved to row index $rowIndex")
                        rs.absolute(rowIndex)
                    }
                    logger.info("Fuzzy match is complete. $comparisonCount comparisons calculated and $matches successful matches.")
                }
            }
        }
        return true
    }
}
