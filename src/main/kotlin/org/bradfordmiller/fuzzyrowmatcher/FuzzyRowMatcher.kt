/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package org.bradfordmiller.fuzzyrowmatcher

import org.apache.commons.text.similarity.FuzzyScore
import org.apache.commons.text.similarity.JaroWinklerDistance
import org.apache.commons.text.similarity.JaroWinklerSimilarity
import org.apache.commons.text.similarity.LevenshteinDistance
import org.bradfordmiller.fuzzyrowmatcher.config.Config
import org.bradfordmiller.simplejndiutils.JNDIUtils
import org.bradfordmiller.sqlutils.SqlUtils
import org.slf4j.LoggerFactory
import java.sql.ResultSet
import java.util.Locale

class FuzzyRowMatcher(private val config: Config) {

    companion object {
        val logger = LoggerFactory.getLogger(FuzzyRowMatcher::class.java)
    }

    fun fuzzyMatch(): Boolean {

        val stringDiffPct = 50.0

        val ds = JNDIUtils.getDataSource(config.sourceJndi.jndiName, config.sourceJndi.context).left
        val hashColumns = config.sourceJndi.hashKeys
        val sql = config.sourceJndi.sql
        val jaroDist = JaroWinklerDistance()
        val jaroSim = JaroWinklerSimilarity()
        val locale = Locale.getDefault()
        val fuzzy = FuzzyScore(locale)
        val levenstein = LevenshteinDistance()

        var comparisonCount = 0

        JNDIUtils.getConnection(ds).use {conn ->
            conn.prepareStatement(sql, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY)!!.use { stmt ->
                stmt.executeQuery().use { rs ->
                    var rowIndex = 1
                    while(rs.next()) {
                        var currentRowData = SqlUtils.stringifyRow(rs, hashColumns)
                        while (rs.next()) {
                            var rowData = SqlUtils.stringifyRow(rs, hashColumns)
                            var jaroDistPct = jaroDist.apply(currentRowData, rowData)
                            var fuzzyScore = levenstein.apply(currentRowData, rowData)
                            //var fuzzyScore = fuzzy.fuzzyScore(currentRowData, rowData)
                            comparisonCount += 1
                            //logger.info("$currentRowData was compared with $rowData and the score was $jaroDistPct for Jaro Distance")
                            //var jaroSimPct = jaroSim.apply(currentRowData, rowData)
                            logger.info("$currentRowData was compared with $rowData and the score was $jaroDistPct for Jaro Distance and $fuzzyScore for Fuzzy score")
                        }
                        rowIndex += 1
                        logger.info("Cursor moved to row index $rowIndex")
                        rs.absolute(rowIndex)
                    }
                    logger.info("Fuzzy match is complete. $comparisonCount comparisons calculated")
                }
            }
        }

        return true
    }


}
